name: üöÄ Construir, Enviar Imagens Docker e Deploy no Kubernetes (Universal)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NAMESPACE: app-demo
      DOCKER_USER: guisilva1k2k
      BACKEND_TAG: deploy
      FRONTEND_TAG: dev
      FRONTEND_URL: http://3.128.96.48:30080
      INFRA_BASE: https://raw.githubusercontent.com/guisilva1k2k/loja-infra/main/k8s

    steps:
      # 1Ô∏è‚É£ Baixar c√≥digo do reposit√≥rio
      - name: 1Ô∏è‚É£ Baixar c√≥digo
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configurar Docker Buildx
      - name: 2Ô∏è‚É£ Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Login no Docker Hub
      - name: 3Ô∏è‚É£ Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4Ô∏è‚É£ Buildar e enviar imagem do Backend
      - name: 4Ô∏è‚É£ Buildar e enviar imagem do Backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USER }}/backend:${{ env.BACKEND_TAG }}
          no-cache: true
          pull: true

      # 5Ô∏è‚É£ Buildar e enviar imagem do Frontend (Angular)
      - name: 5Ô∏è‚É£ Buildar e enviar imagem do Frontend (Angular)
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: ${{ env.DOCKER_USER }}/frontend:${{ env.FRONTEND_TAG }}
          no-cache: true
          pull: true

      # 6Ô∏è‚É£ Instalar kubectl
      - name: 6Ô∏è‚É£ Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # 7Ô∏è‚É£ Configurar credenciais de acesso ao Kubernetes
      - name: 7Ô∏è‚É£ Configurar kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          sed -i 's/127.0.0.1/3.128.96.48/g' $HOME/.kube/config
          kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE
          echo "‚úÖ kubeconfig aplicado com sucesso!"
          kubectl cluster-info --insecure-skip-tls-verify || echo "‚ö†Ô∏è Aviso: verifique o acesso ao cluster"

      # 8Ô∏è‚É£ Baixar manifestos Kubernetes automaticamente
      - name: 8Ô∏è‚É£ Baixar manifestos K8s (infra externa)
        run: |
          set -e
          mkdir -p k8s
          for f in 00-namespace.yaml 01-secret-mysql.yaml 02-configmap-app.yaml 03-configmap-mysql-init.yaml 04-configmap-mysql-dump.yaml 10-mysql-service.yaml 11-mysql-statefulset.yaml 20-backend-service.yaml 21-backend-deployment.yaml 30-frontend-service.yaml 31-frontend-deployment.yaml 50-job-mysql-import.yaml kustomization.yaml; do
            echo "‚¨á  Baixando $f"
            curl -fsSL "$INFRA_BASE/$f" -o "k8s/$f"
          done
          test -s k8s/kustomization.yaml || { echo "‚ùå Falha ao baixar kustomization.yaml"; exit 1; }
          echo "‚úÖ Manifestos baixados com sucesso"

      # 9Ô∏è‚É£ Aplicar manifestos do Kubernetes
      - name: 9Ô∏è‚É£ Aplicar manifestos Kubernetes
        run: |
          echo "üì¶ Aplicando manifestos no cluster..."
          kubectl apply -k k8s --validate=false --insecure-skip-tls-verify
          echo "‚úÖ Manifestos aplicados com sucesso"

      # üîü Atualizar imagens dos deployments
      - name: üîü Atualizar imagens nos deployments
        run: |
          echo "üîÅ Atualizando imagens no cluster..."
          kubectl set image deployment/backend app=${{ env.DOCKER_USER }}/backend:${{ env.BACKEND_TAG }} -n $NAMESPACE --insecure-skip-tls-verify
          kubectl set image deployment/frontend web=${{ env.DOCKER_USER }}/frontend:${{ env.FRONTEND_TAG }} -n $NAMESPACE --insecure-skip-tls-verify
          echo "‚úÖ Imagens atualizadas com sucesso!"

      # 1Ô∏è‚É£1Ô∏è‚É£ Verificar status dos deployments
      - name: 1Ô∏è‚É£1Ô∏è‚É£ Aguardar rollout dos deployments
        run: |
          echo "üïì Aguardando os pods ficarem prontos..."
          kubectl rollout status deployment/backend -n $NAMESPACE --timeout=180s || kubectl logs -l app.kubernetes.io/name=backend -n $NAMESPACE --tail=50
          kubectl rollout status deployment/frontend -n $NAMESPACE --timeout=180s || kubectl logs -l app.kubernetes.io/name=frontend -n $NAMESPACE --tail=50
          echo "‚úÖ Rollouts conclu√≠dos!"

      # 1Ô∏è‚É£2Ô∏è‚É£ Rodar Job de importa√ß√£o do dump SQL
      - name: 1Ô∏è‚É£2Ô∏è‚É£ Executar job SQL de importa√ß√£o (opcional)
        run: |
          echo "üì• Rodando importa√ß√£o do SQL dump no MySQL..."
          kubectl delete job mysql-import -n $NAMESPACE --ignore-not-found --insecure-skip-tls-verify
          kubectl apply -f k8s/50-job-mysql-import.yaml -n $NAMESPACE --validate=false --insecure-skip-tls-verify
          echo "‚úÖ Job de importa√ß√£o aplicada!"

      # 1Ô∏è‚É£3Ô∏è‚É£ Mostrar URL p√∫blica do frontend
      - name: 1Ô∏è‚É£3Ô∏è‚É£ Resumo final do deploy
        run: |
          echo "‚úÖ Backend: ${{ env.DOCKER_USER }}/backend:${{ env.BACKEND_TAG }}"
          echo "‚úÖ Frontend: ${{ env.DOCKER_USER }}/frontend:${{ env.FRONTEND_TAG }}"
          echo "üåê Acesse o frontend em:"
          echo "üëâ ${{ env.FRONTEND_URL }}"
          echo "üöÄ Deploy conclu√≠do com sucesso!"
